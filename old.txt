import os
import time
import requests
from watchdog.observers import Observer
from watchdog.events import FileSystemEventHandler
from datetime import datetime

# ตั้งค่า Access Token ของ LINE Notify
# LINE_NOTIFY_TOKEN = 'RNkb8ch08Hl6L6Z5DzfvTepq6RPiN18XKW4Z9ZGfVH6'
LINE_NOTIFY_TOKENS = [
    'RNkb8ch08Hl6L6Z5DzfvTepq6RPiN18XKW4Z9ZGfVH6',
    # 'YOUR_LINE_NOTIFY_ACCESS_TOKEN_2',
    # เพิ่ม token อื่น ๆ ได้ตามต้องการ
]

# ฟังก์ชันสำหรับส่งการแจ้งเตือนผ่าน LINE Notify พร้อมรูปภาพ
def send_line_notify(image_path):
    url = 'https://notify-api.line.me/api/notify'

    for token in LINE_NOTIFY_TOKENS:
        headers = {
            'Authorization': f'Bearer {token}'
        }

    current_time = datetime.now().strftime('%d-%m-%Y %H:%M:%S')  # เวลาปัจจุบัน
    data = {
        'message': current_time  # ส่งข้อความเป็นวันที่และเวลาปัจจุบัน
    }

    files = {}

    if image_path:
            try:
                with open(image_path, 'rb') as image_file:
                    files['imageFile'] = image_file
                    response = requests.post(url, headers=headers, data=data, files=files)
                    response.raise_for_status()  # Raise an exception for HTTP errors
                    return
            except Exception as e:
                print(f"Failed to send image: {e}")
                return

# สร้างคลาสสำหรับจัดการเหตุการณ์การเปลี่ยนแปลงในโฟลเดอร์
class FileEventHandler(FileSystemEventHandler):
    def on_created(self, event):
        if not event.is_directory:
            file_path = event.src_path

            # ตรวจสอบว่าไฟล์เป็นรูปภาพหรือไม่
            if file_path.lower().endswith(('.png', '.jpg', '.jpeg', '.gif', '.bmp')):
                # ตรวจสอบว่าไฟล์พร้อมใช้งานหรือไม่
                time.sleep(1)  # รอให้ไฟล์เสร็จสิ้นการสร้าง
                send_line_notify(file_path)

# กำหนดโฟลเดอร์ที่ต้องการตรวจสอบ
today_date = datetime.now().strftime('%Y-%m-%d')
folder_to_watch = f'C:/Users/NitipoomSa/Desktop/{today_date}'

# สร้าง observer และ event handler
event_handler = FileEventHandler()
observer = Observer()
observer.schedule(event_handler, folder_to_watch, recursive=False)

# เริ่มการตรวจสอบ
observer.start()

try:
    while True:
        time.sleep(1)
except KeyboardInterrupt:
    observer.stop()

observer.join()
